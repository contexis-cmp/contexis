package commands

import (
	"context"
	"fmt"
	"io"
	"os"
	"text/template"

	"github.com/contexis-cmp/contexis/src/cli/logger"
	"go.uber.org/zap"
)

// generateRAGPrompts creates prompt templates for RAG responses
func generateRAGPrompts(ctx context.Context, config RAGConfig) error {
	log := logger.WithContext(ctx)

	// Create search response prompt
	searchPromptPath := fmt.Sprintf("prompts/%s/search_response.md", config.Name)

	searchPromptTemplate := `# {{ .Name }} Search Response

**User Query:** {{ .UserQuery }}

**Retrieved Context:**
{{ range $index, $doc := .RetrievedDocuments }}
### Document {{ $index }}: {{ $doc.Title }}
{{ $doc.Content }}

---
{{ end }}

**Response:**
Based on the retrieved documents, here is the answer to your question:

{{ .Response }}

{{ if .SourceDocuments }}
**Sources:**
{{ range .SourceDocuments }}
- {{ .Title }} (relevance: {{ .RelevanceScore }})
{{ end }}
{{ end }}

---
*Response generated by {{ .Name }} RAG system using {{ .Embeddings }} embeddings*
`

	tmpl, err := template.New("search_prompt").Parse(searchPromptTemplate)
	if err != nil {
		log.Error("failed to parse search prompt template", zap.Error(err))
		return fmt.Errorf("failed to parse search prompt template: %w", err)
	}

	file, err := os.Create(searchPromptPath)
	if err != nil {
		log.Error("failed to create search prompt file", zap.String("path", searchPromptPath), zap.Error(err))
		return fmt.Errorf("failed to create search prompt file: %w", err)
	}
	defer file.Close()

	// Create template data with placeholder values
	templateData := struct {
		RAGConfig
		UserQuery          string
		RetrievedDocuments []struct {
			Title   string
			Content string
		}
		Response        string
		SourceDocuments []struct {
			Title          string
			RelevanceScore float64
		}
	}{
		RAGConfig: config,
		UserQuery: "",
		RetrievedDocuments: []struct {
			Title   string
			Content string
		}{},
		Response: "",
		SourceDocuments: []struct {
			Title          string
			RelevanceScore float64
		}{},
	}

	if err := tmpl.Execute(file, templateData); err != nil {
		log.Error("failed to execute search prompt template", zap.Error(err))
		return fmt.Errorf("failed to execute search prompt template: %w", err)
	}

	// Create no results prompt
	noResultsPromptPath := fmt.Sprintf("prompts/%s/no_results.md", config.Name)

	noResultsPrompt := `# No Results Found

**User Query:** {{ .UserQuery }}

**Response:**
I couldn't find any relevant information in the knowledge base to answer your question about "{{ .UserQuery }}".

**Suggestions:**
- Try rephrasing your question with different keywords
- Check if the information might be in a different document
- Consider adding relevant documents to the knowledge base

If you need help with this topic, please provide additional context or check with a human expert.

---
*Response generated by {{ .Name }} RAG system*
`

	tmpl, err = template.New("no_results_prompt").Parse(noResultsPrompt)
	if err != nil {
		log.Error("failed to parse no results prompt template", zap.Error(err))
		return fmt.Errorf("failed to parse no results prompt template: %w", err)
	}

	file, err = os.Create(noResultsPromptPath)
	if err != nil {
		log.Error("failed to create no results prompt file", zap.String("path", noResultsPromptPath), zap.Error(err))
		return fmt.Errorf("failed to create no results prompt file: %w", err)
	}
	defer file.Close()

	// Create template data with placeholder values
	noResultsTemplateData := struct {
		RAGConfig
		UserQuery string
	}{
		RAGConfig: config,
		UserQuery: "",
	}

	if err := tmpl.Execute(file, noResultsTemplateData); err != nil {
		log.Error("failed to execute no results prompt template", zap.Error(err))
		return fmt.Errorf("failed to execute no results prompt template: %w", err)
	}

	// Create agent_response.md as a symlink to search_response.md to avoid redundancy
	agentResponsePath := fmt.Sprintf("prompts/%s/agent_response.md", config.Name)

	// Remove existing file if it exists
	os.Remove(agentResponsePath)

	// Create symlink from agent_response.md to search_response.md using relative path
	if err := os.Symlink("search_response.md", agentResponsePath); err != nil {
		// If symlink fails (e.g., on Windows), copy the file instead
		if err := copyFile(searchPromptPath, agentResponsePath); err != nil {
			log.Error("failed to create agent response symlink/copy", zap.String("path", agentResponsePath), zap.Error(err))
			return fmt.Errorf("failed to create agent response symlink/copy: %w", err)
		}
	}

	log.Info("RAG prompts generated",
		zap.String("search_prompt", searchPromptPath),
		zap.String("agent_response", agentResponsePath))
	return nil
}

// copyFile copies a file from src to dst
func copyFile(src, dst string) error {
	sourceFile, err := os.Open(src)
	if err != nil {
		return err
	}
	defer sourceFile.Close()

	destFile, err := os.Create(dst)
	if err != nil {
		return err
	}
	defer destFile.Close()

	_, err = io.Copy(destFile, sourceFile)
	return err
}
