package commands

import (
	"context"
	"fmt"
	"os"
	"text/template"

	"github.com/contexis-cmp/contexis/src/cli/logger"
	"go.uber.org/zap"
)

// generateRAGConfig creates additional configuration files
func generateRAGConfig(ctx context.Context, config RAGConfig) error {
	log := logger.WithContext(ctx)

	// Create requirements.txt for Python dependencies
	requirementsPath := fmt.Sprintf("tools/%s/requirements.txt", config.Name)

	requirements := `# Python dependencies for {{.Name}} RAG system
sentence-transformers>=2.2.0
chromadb>=0.4.0
PyYAML>=6.0
numpy>=1.24.0
`

	tmpl, err := template.New("requirements").Parse(requirements)
	if err != nil {
		log.Error("failed to parse requirements template", zap.Error(err))
		return fmt.Errorf("failed to parse requirements template: %w", err)
	}

	file, err := os.Create(requirementsPath)
	if err != nil {
		log.Error("failed to create requirements file", zap.String("path", requirementsPath), zap.Error(err))
		return fmt.Errorf("failed to create requirements file: %w", err)
	}
	defer file.Close()

	if err := tmpl.Execute(file, config); err != nil {
		log.Error("failed to execute requirements template", zap.Error(err))
		return fmt.Errorf("failed to execute requirements template: %w", err)
	}

	// Create README for the RAG system
	readmePath := fmt.Sprintf("contexts/%s/README.md", config.Name)

	readmeTemplate := `# {{.Name}} RAG System

A knowledge-based retrieval system generated with CMP Framework.

## Overview

This RAG (Retrieval-Augmented Generation) system provides:
- Semantic search across document collections
- Context-aware responses based on retrieved information
- Drift detection and consistency monitoring
- Scalable vector storage with {{.DBType}}

## Architecture

- **Context**: rag_agent.ctx - Defines search behavior and response rules
- **Memory**: Vector database with {{.Embeddings}} embeddings
- **Prompts**: Templates for consistent response formatting
- **Tools**: Python implementation for semantic search
- **Tests**: Drift detection and quality assurance

## Quick Start

1. **Install dependencies:**
   ` + "```bash" + `
   cd tools/{{.Name}}
   pip install -r requirements.txt
   ` + "```" + `

2. **Add documents:**
   ` + "```bash" + `
   cp your-documents/* memory/{{.Name}}/documents/
   ` + "```" + `

3. **Test the system:**
   ` + "```bash" + `
   python tests/{{.Name}}/test_rag.py
   ` + "```" + `

4. **Run a query:**
   ` + "```bash" + `
   ctx run {{.Name}} "Your question here"
   ` + "```" + `

## Configuration

- **Database**: {{.DBType}} vector store
- **Embeddings**: {{.Embeddings}} model
- **Chunk Size**: 700 tokens with 120 token overlap
- **Similarity Threshold**: 0.7

## Customization

- Modify contexts/{{.Name}}/rag_agent.ctx to adjust behavior
- Update prompts/{{.Name}}/search_response.md for response formatting
- Add custom tools in tools/{{.Name}}/
- Extend tests in tests/{{.Name}}/

## Monitoring

The system includes drift detection to monitor:
- Response consistency over time
- Search relevance and accuracy
- Performance metrics
- Business rule compliance

Generated by CMP Framework v{{.Version}}
`

	tmpl, err = template.New("readme").Parse(readmeTemplate)
	if err != nil {
		log.Error("failed to parse readme template", zap.Error(err))
		return fmt.Errorf("failed to parse readme template: %w", err)
	}

	file, err = os.Create(readmePath)
	if err != nil {
		log.Error("failed to create readme file", zap.String("path", readmePath), zap.Error(err))
		return fmt.Errorf("failed to create readme file: %w", err)
	}
	defer file.Close()

	if err := tmpl.Execute(file, config); err != nil {
		log.Error("failed to execute readme template", zap.Error(err))
		return fmt.Errorf("failed to execute readme template: %w", err)
	}

	log.Info("RAG configuration files generated", zap.String("requirements", requirementsPath))
	return nil
}
